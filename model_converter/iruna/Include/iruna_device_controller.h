//---------------------------------------------------------
// 
//	iruna_device_controller.h
//	デバイスの間接操作
//	作成日	6月23日
//	製作者 立川 翔野
// 
//---------------------------------------------------------

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_DEVICE_CONTROLLER_H
#define IRUNA_DEVICE_CONTROLLER_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_math.h"

/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//=====================================================================
//
//	クラス名	:	Primitive
//	処理		:	Primitiveのタイプ定義
//	製作者		:	立川 翔野
//	作成日		:	2011/06/23	- 作成
//
//====================================================================
struct Primitive
{
	enum Type
	{
		POINT_LIST		= 1,	// D3DPT_POINTLIST
		LINE_LIST		= 2,	// D3DPT_LINELIST
		LINE_STRIP		= 3,	// D3DPT_LINESTRIP
		TRIANGLE_LIST	= 4,	// D3DPT_TRIANGLELIST
		TRIANGLE_STRIP	= 5,	// D3DPT_TRIANGLESTRIP
		TRIANGLE_FAN	= 6,	// D3DPT_TRIANGLEFAN
	};
};

//=====================================================================
//
//	クラス名	:	DeviceController
//	処理		:	デバイスの間接的に処理
//	製作者		:	立川 翔野
//	作成日		:	2011/06/23	- 作成
//
//====================================================================
class DeviceController
{
//	プライベート	メンバ変数
private:
	static LPDIRECT3DDEVICE9*		ppD3dDevice;		// デバイスへのポインタ
//	パブリック		メンバ関数
public:
	//--------------------------------------------------------------------
	// 
	//	処理	:	コンストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	DeviceController();

	//--------------------------------------------------------------------
	// 
	//	処理	:	デストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	~DeviceController();

	//--------------------------------------------------------------------
	// 
	//	処理	:	描画を実行(頂点データはソフトウェア側版)
	//	第1引数	:	[in] type			- ポリゴンの形
	//	第2引数	:	[in] polygonCnt		- 描画するポリゴンの数
	//	第3引数	:	[in] vertexBuffer	- 描画に使用する頂点データ
	//	第4引数	:	[in] vertexStride	- 頂点データ1個分の大きさ
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	DrawPrimitiveUp( Primitive::Type type, U_LONG polygonCnt, const void* vertexBuffer, U_LONG vertexStride );

	//--------------------------------------------------------------------
	// 
	//	処理	:	描画を実行(頂点データはハードウェア側版)
	//	第1引数	:	[in] type			- ポリゴンの形
	//	第2引数	:	[in] polygonCnt		- 描画するポリゴンの数
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	DrawPrimitive( Primitive::Type type, U_LONG polygonCnt );

	//--------------------------------------------------------------------
	// 
	//	処理	:	インデックスを使った描画を実行(頂点データはハードウェア側版)
	//	第1引数	:	[in] type			- ポリゴンの形
	//	第2引数	:	[in] vertexCnt		- モデルの頂点の数
	//	第3引数	:	[in] polygonCnt		- 描画するポリゴンの数
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	DrawIndexPrimitive( Primitive::Type type, U_LONG vertexCnt, U_LONG polygonCnt );

	//--------------------------------------------------------------------
	// 
	//	処理	:	Zバッファに描きこむか描きこまないかの設定する
	//	第1引数	:	[in] flag			- ture：描きこむ　false：描きこまない
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	void	SetZBufferState( bool flag );

	//--------------------------------------------------------------------
	// 
	//	処理	:	デバイスに変換行列をセットする
	//	第1引数	:	[in] target	- どの変換行列をセットするか(World,View,Projection)
	//	第2引数	:	[in] matrix	- 変換行列
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	SetTransform( D3DTRANSFORMSTATETYPE target, math::Matrix matrix );

	//--------------------------------------------------------------------
	// 
	//	処理	:	デバイスにテクスチャをセットする
	//	第1引数	:	[in] stage		- どのステージにセットするか
	//	第2引数	:	[in] texture	- テクスチャデータ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	SetTexture( U_LONG stage, LPDIRECT3DTEXTURE9 texture );

	//--------------------------------------------------------------------
	// 
	//	処理	:	デバイスにマテリアルをセットする
	//	第1引数	:	[in] material	- マテリアルデータ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	SetMaterial( D3DMATERIAL9 material );

	//--------------------------------------------------------------------
	// 
	//	処理	:	RenderStateを設定する
	//	第1引数	:	[in] type	- 設定するRenderStateのタイプ
	//	第2引数	:	[in] val	- 設定するRenderStateの引数
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	SetRenderState( D3DRENDERSTATETYPE type ,U_LONG val );

	
};

}	//	graphics	end
}	//	iruna		end

/*----グローバル関数 宣言----------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//--------------------------------------------------------------------
// 
//	処理	:	指定した裏画面をクリアする
//	第1引数	:	[in] flag	- どのバッファをクリアするか
//	戻り値	:	結果フラグ	ture：成功　false：失敗
//	製作者	:	立川 翔野
//	作成日	:	2011/06/23	- 作成
// 
//--------------------------------------------------------------------
bool ClearBackBuffer( DWORD flag );

//--------------------------------------------------------------------
// 
//	処理	:	裏画面をクリアし、描画を開始する
//	戻り値	:	結果フラグ	ture：成功　false：失敗
//	製作者	:	立川 翔野
//	作成日	:	2011/06/23	- 作成
// 
//--------------------------------------------------------------------
bool ClearScreen();

//--------------------------------------------------------------------
// 
//	処理	:	描画を終了し、裏画面に描いたものを表画面へ転送
//	戻り値	:	結果フラグ	ture：成功　false：失敗
//	製作者	:	立川 翔野
//	作成日	:	2011/06/23	- 作成
// 
//--------------------------------------------------------------------
bool SwapScreen();

}	//	graphics	end
}	//	iruna		end


#endif	//	IRUNA_DEVICE_CONTROLLER_H	end