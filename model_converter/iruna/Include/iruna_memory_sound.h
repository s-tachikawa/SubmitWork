//---------------------------------------------------------
// 
//	iruna_memory_sound.h
//	サウンドのメモリ展開再生
//	作成日 9月6日
//	製作者 立川 翔野
// 
//---------------------------------------------------------

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_MEMORY_SOUND_H
#define IRUNA_MEMORY_SOUND_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"



/*----データ型宣言-------------------------------------------------*/
namespace iruna
{
namespace sound
{

/*----前方宣言-------------------------------------------------*/
class OggDecoder;

//=====================================================================
//
//	クラス名	:	MemorySound
//	処理		:	サウンドファイルのメモリ展開再生
//	製作者		:	立川 翔野
//	作成日		:	2011/09/06	- 作成
//
//=====================================================================
class MemorySound
{

//	プライベート	メンバ変数
private:

	IXAudio2SourceVoice*	voice;					//	XAoudio2クラス
	BYTE*					buffer;					//	展開するバッファ
	U_INT					bufferSize;				//	展開するファイルメモリサイズ

//	プライベート	メンバ変数
private:

	//--------------------------------------------------------------------
	// 
	//	処理	:	コピーコンストラクタ(コピー禁止用)
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
			MemorySound( const MemorySound& dummy );

	//--------------------------------------------------------------------
	// 
	//	処理	:	＝演算子のオーバーロード(コピー禁止)
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	const	MemorySound&	operator =( const MemorySound& dummy );
	
	//--------------------------------------------------------------------
	// 
	//	処理	:	XAoudio2からサウンドファイルを再生するためのクラスを作成
	//	第1引数	:	[in] format	- 読み込むサウンドのフォーマット
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	bool	CreateVoice( const WAVEFORMATEX& format );

	//--------------------------------------------------------------------
	// 
	//	処理	:	サウンドに必要なメモリバッファを読み込む
	//	第1引数	:	[in] decocder	- 読み込むOgg読み込みクラスのポインタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	bool	LoadBuffer( OggDecoder* decocder );


//	パブリック	メンバ関数
public:

	//--------------------------------------------------------------------
	// 
	//	処理	:	コンストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	MemorySound();

	//--------------------------------------------------------------------
	// 
	//	処理	:	デストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	~MemorySound();

	//--------------------------------------------------------------------
	// 
	//	処理	:	サウンドファイルの読み込み
	//	第1引数	:	[in] path	-　読み込むサウンドファイルのパス
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	int		LoadSound( std::string path );

	//--------------------------------------------------------------------
	// 
	//	処理	:	サウンドの再生(デフォルトで1回のみ再生)
	//	第1引数	:	[in] loopPos	- ループフラグ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	int		PlaySound( int loopPos = -1 );

	//--------------------------------------------------------------------
	// 
	//	処理	:	サウンドの停止
	//	製作者	:	立川 翔野
	//	作成日	:	2011/09/06	- 作成
	// 
	//--------------------------------------------------------------------
	int		StopSound();

	//--------------------------------------------------------------------
	// 
	//	処理	:	音量の設定
	//	第1引数	:	[in] setVolume	- 設定する音量
	//	製作者	:	立川 翔野
	//	作成日	:	2011/07/10	- 作成
	// 
	//--------------------------------------------------------------------
	int SetVolume( float setVolume );

	//--------------------------------------------------------------------
	// 
	//	処理	:	再生スピードの設定
	//	第1引数	:	[in] setVolume	- 設定する再生スピード
	//	製作者	:	立川 翔野
	//	作成日	:	2011/07/10	- 作成
	// 
	//--------------------------------------------------------------------
	int SetSpeedRatio( float ratio );

	//--------------------------------------------------------------------
	// 
	//	処理	:	サウンドの解放
	//	製作者	:	立川 翔野
	//	作成日	:	2011/07/10	- 作成
	// 
	//--------------------------------------------------------------------
	void Release();



};

}	//	sound	end
}	//	iruna	end

#endif //	IRUNA_MEMORY_SOUND_H	end