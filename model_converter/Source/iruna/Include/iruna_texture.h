//---------------------------------------------------------
// 
//	iruna_texture.h
//	テクスチャーの管理
//	作成日 6月23日
//	製作者 立川 翔野
// 
//---------------------------------------------------------

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_TEXTURE_H
#define IRUNA_TEXTURE_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"
#include "../Include/iruna_color4.h"
#include "../Include/iruna_surface.h"

/*----データ型 宣言------------------------------------------------*/
namespace iruna
{
namespace graphics
{

//=====================================================================
//
//	クラス名	:	Texture
//	処理		:	テクスチャ管理クラス
//	製作者		:	立川 翔野
//	作成日		:	2011/06/23	- 作成
//
//=====================================================================
class Texture
{
//	パブリック	型定義
public:
	// テクスチャにアクセスするための構造体
	typedef	D3DLOCKED_RECT	LockedRect;

//	プライベート	メンバ変数
private:
	LPDIRECT3DTEXTURE9	texture;		// テクスチャ
	std::string			recoveryPath;	// テクスチャーのパス

//	パブリック	メンバ関数
public:
	//--------------------------------------------------------------------
	// 
	//	処理	:	コンストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	Texture();

	//--------------------------------------------------------------------
	// 
	//	処理	:	デストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	~Texture();

	//--------------------------------------------------------------------
	// 
	//	処理	:	画像ファイルからテクスチャを読み込む
	//	第1引数	:	[in] path		- ファイルへのパス
	//	第2引数	:	[in] color		- カラーキー、透過色の設定(デフォルトは0)
	//	第3引数	:	[in] mipLevel	- ミップマップレベル、0〜8を指定(デフォルトは1)
	//	第4引数	:	[in] filter		- フィルタリング(デフォルトはD3DX_FILTER_LINEAR)
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Load( std::string path, Color4 color = 0, U_INT mipLevel = 0, DWORD filter = D3DX_FILTER_LINEAR );

	//--------------------------------------------------------------------
	// 
	//	処理	:	カラの動的テクスチャを作成する
	//	第1引数	:	[in] width		- テクスチャの横幅
	//	第2引数	:	[in] height		- テクスチャの高さ
	//	第3引数	:	[in] usage		- 使用方法(D3DUSAGE_DYNAMIC or D3DUSAGE_RENDERTARGET)
	//	第4引数	:	[in] mipLevel	- ミップマップレベル、0〜8を指定(デフォルトは1)
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Create( U_INT width, U_INT height, DWORD usage, U_INT mipLevel = 1 );

	//--------------------------------------------------------------------
	// 
	//	処理	:	テクスチャを解放する
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	void	Release();

	//--------------------------------------------------------------------
	// 
	//	処理	:	テクスチャをロックし、アクセスするためのLockedRectを返す(動的テクスチャのみ)
	//	第1引数	:	[out] rect		- テクスチャにアクセスするための構造体
	//	第2引数	:	[in] flag		- オプションフラグ(デフォルトはD3DLOCK_DISCARD)
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Lock( LockedRect& rect, DWORD flag = D3DLOCK_DISCARD );

	//--------------------------------------------------------------------
	// 
	//	処理	:	テクスチャをアンロックし、アクセスできないようにする(動的テクスチャのみ)
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Unlock();

	//--------------------------------------------------------------------
	// 
	//	処理	:	テクスチャを取得
	//	戻り値	:	テクスチャデータ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	const LPDIRECT3DTEXTURE9&	GetTexture();

	//--------------------------------------------------------------------
	// 
	//	処理	:	テクスチャのサイズを取得
	//	戻り値	:	テクスチャサイズ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	POINT GetSize();

	//--------------------------------------------------------------------
	// 
	//	処理	:	サーフェスを取得
	//	第1引数	:	[in] surface	- 取得したサーフェスを格納するもの
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/23	- 作成
	// 
	//--------------------------------------------------------------------
	bool	GetSurface( Surface& surface );

};

}	//	graphics	end
}	//	iruna		end

#endif	//	IRUNA_TEXTURE_H	end