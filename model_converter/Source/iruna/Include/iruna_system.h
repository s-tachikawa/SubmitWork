//---------------------------------------------------------
// 
//	iruna_system.h
//	irunaライブラリ管理クラス
//	作成日 6月24日
//	製作者 立川 翔野
// 
//---------------------------------------------------------

/*----多重インクルード防止-------------------------------------------------*/
#ifndef IRUNA_SYSTEM_H
#define IRUNA_SYSTEM_H

/*----インクルード-------------------------------------------------*/
#include "../Include/iruna_utility.h"


namespace iruna
{
	// 前方宣言
namespace core
{

class	Window;
class	FrameRateManage;

}	// core		end

namespace graphics
{

class	Device;
class	Text;

}	// graphics	end

namespace sound
{

	class SoundDevice;

}	//	sound	end	

namespace io
{

class	InputDevice;

}	// io		end

//=====================================================================
//
//	クラス名	:	System
//	処理		:	ライブラリの起動・管理・終了をするクラス(シングルトン)
//	製作者		:	立川 翔野
//	作成日		:	2011/06/24	- 作成
//
//=====================================================================
class System
{
// プライベート	メンバ変数
private:
	core::FrameRateManage*	frame;		// フレームレート管理クラス
	core::Window*			window;		// ウィンドウ管理クラス
	graphics::Device*		device;		// デバイス
	sound::SoundDevice*		sound;		// サウンドデバイス
	io::InputDevice*		input;		// インプットデバイス
	graphics::Text*			text;		// テキスト管理クラス
	static System*			instance;	// インスタンス(静的メンバ変数)

// プライベート	メンバ関数
private:
	//--------------------------------------------------------------------
	// 
	//	処理	:	コンストラクタ(外部からの呼出し禁止)
	//	製作者	:	立川 翔野
	//	作成日	:	2011/05/17	- 作成
	// 
	//--------------------------------------------------------------------
	System();

// ●パブリック		メンバ関数
public:
	//--------------------------------------------------------------------
	// 
	//	処理	:	デストラクタ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	~System();

	//--------------------------------------------------------------------
	// 
	//	処理	:	システムクラスの唯一のインスタンス生成する関数(静的メンバ関数)
	//	戻り値	:	Systemクラスのインスタンス
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	static System&	GetInstance();

	//--------------------------------------------------------------------
	// 
	//	処理	:	ウィンドウやデバイスのセットアップをする
	//	第1引数	:	[in] width		- ウィンドウの横幅
	//	第2引数	:	[in] height		- ウィンドウの高さ
	//	第3引数	:	[in] mode		- ウィンドウのモード(ウィンドウorフルスクリーン)
	//	第4引数	:	[in] name		- ウィンドウのタイトル
	//	第5引数	:	[in] style		- ウィンドウのスタイル(デフォルトはWS_OVERLAPPEDWINDOW)
	//	第6引数	:	[in] speakers	- スピーカーの構成(デフォルトはSPEAKER_STEREO)
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Setup( U_LONG width, U_LONG height, bool mode, LPCSTR name,  U_INT speakers = SPEAKER_STEREO, DWORD style = WS_OVERLAPPEDWINDOW, DWORD styleEx = 0);

	//--------------------------------------------------------------------
	// 
	//	処理	:	ウィンドウやデバイスを削除・開放をする
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/024	- 作成
	// 
	//--------------------------------------------------------------------
	void	Release();

	//--------------------------------------------------------------------
	// 
	//	処理	:	システムの更新、メッセージ処理など
	//	戻り値	:	エラーフラグ	true：問題なし　false：エラー
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Run();

	//--------------------------------------------------------------------
	// 
	//	処理	:	ノンアクティブ時のシステム更新
	//	戻り値	:	エラーフラグ	true：問題なし　false：エラー
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	bool	Idle();

	//--------------------------------------------------------------------
	// 
	//	処理	:	ウィンドウがアクティブかノンアクティブかを取得する
	//	戻り値	:	アクティブフラグ	true：アクティブ　false：ノンアクティブ
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	bool	IsActive();

	//--------------------------------------------------------------------
	// 
	//	処理	:	起動中にウィンドウモードを切り替える
	//	第1引数	:	[in] mode	- ウィンドウのモード(ウィンドウorフルスクリーン)
	//	戻り値	:	結果フラグ	ture：成功　false：失敗
	//	製作者	:	立川 翔野
	//	作成日	:	2011/06/24	- 作成
	// 
	//--------------------------------------------------------------------
	bool	ChangeWindowMode( bool mode );
};

}	//	iruna	end

#endif	//	IRUNA_SYSTEM_H